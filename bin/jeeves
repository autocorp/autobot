#!/usr/bin/env python

import getopt
import sys
import os
import subprocess
from subprocess import call
import re

options, remainder = getopt.getopt(sys.argv[1:], 'cwrh', ['check', 'walkthrough', 'run', 'help', ])


class colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def get_version(package):

    try:
        command_result = subprocess.check_output([package, "--version"],stderr=None)
        m = re.search('(\d+\.)?(\d+\.)?(\*|\d+)', command_result)
    except OSError as e:
        if e.errno == os.errno.ENOENT: # OSError: [Errno 2] No such file or directory
            return False
        else:
            print (colors.FAIL + "[danger danger] %s :: Something went wrong while trying to get the version for this package" % (package) + colors.ENDC)
            raise

    return m.group(0)


def version_check(package, try_text):
    software_version = get_version(package)
    if(software_version is False):
        print (colors.FAIL + "[missing] %s :: try `%s`" % (package, try_text) + colors.ENDC)
    else:
        print (colors.OKGREEN + "[ok] %s v%s" % (package, software_version) + colors.ENDC)


def env_check(env_vars):

    # find the longest string (first loop)
    longest=0
    for key, value in env_vars.iteritems():

        env_value = os.environ.get(key)

        if(env_value):
            envlen=len(env_value)
        else:
            envlen = 16 # if we don't have an env value, we'll print `Variable not set`

        variblelen=len(key)+envlen

        if variblelen > longest:
            longest = variblelen

    # print the values (second loop)
    for key, value in env_vars.iteritems():

        env_value = os.environ.get(key)

        if (env_value is None):
            env_value = 'Variable not set'
            envlen = 16 # if we don't have an env value, we'll print `Variable not set`
        else:
            envlen=len(env_value)

        variblelen=longest-(len(key)+envlen)

        padding_string=" "*(variblelen)

        if (os.environ.get(key) is None) or (len(env_value)==0):
            start_color=colors.FAIL
        else:
            start_color=colors.OKGREEN

            # if it's a password, lets not print all of it
            if "PASSWORD" in key:
                if (len(env_value)>3):
                    env_value = '*'*(len(env_value)-2) + env_value[len(env_value)-2:]
                else:
                    env_value = '*'*len(env_value)

        print "Your ENV %s%s=%s%s %s:: Try something like this `export %s=%s`" % (start_color, key, env_value, colors.ENDC, padding_string, key, value)

    print


def check_requirments():

    print colors.HEADER + '--------------------------------------------------------------------------' + colors.ENDC
    print colors.HEADER + 'Okay Sir, here is everything I know about your system. *_*' + colors.ENDC
    print colors.HEADER + '--------------------------------------------------------------------------' + colors.ENDC


    print
    print colors.HEADER + 'Checking for software dependencies' + colors.ENDC
    print colors.OKBLUE + 'I did not have time to check for specific versions,' + colors.ENDC
    print colors.OKBLUE + 'but here is an inventory of all the software you will need to get started.' + colors.ENDC
    print colors.OKBLUE + 'Treat this like a health indicator,' + colors.ENDC
    print colors.OKBLUE + 'all green means move onto the next step, red means fix before moving on.' + colors.ENDC

    version_check("git", "brew install git")
    version_check("ansible", "brew install ansible")
    version_check("vboxmanage", "https://www.virtualbox.org/wiki/Downloads")
    version_check("docker", "curl -L https://get.docker.com/builds/Darwin/x86_64/docker-latest > /usr/local/bin/docker'")
    version_check("docker-machine", "sudo wget -O /usr/local/bin/docker-machine https://github.com/docker/machine/releases/download/v0.1.0/docker-machine_darwin-amd64; chmod +x docker-machine")
    version_check("docker-compose", "curl -L https://github.com/docker/compose/releases/download/1.1.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose; chmod +x /usr/local/bin/docker-compose")
    
    if len(sys.argv) > 2: # only if something was passed
        if (sys.argv[2]=='software'):
            print
            print colors.OKBLUE + 'Once you have all the required software try running `./bin/jeeves --run local`' + colors.ENDC
            print
            sys.exit()

    # print
    # print colors.HEADER + 'Checking your ~/.docker/ file for `dev` machine keys.' + colors.ENDC
    # print colors.OKBLUE + 'This will be important once you create an dev container.' + colors.ENDC

    # command = 'ls ~/.docker/machine/machines/dev/'
    # command_result = os.popen(command).read()
    # print command_result

    # print
    # print colors.HEADER + 'Checking your ~/.docker/ file for `autobot` machine keys.' + colors.ENDC
    # print colors.OKBLUE + 'This will be important once you create an autobot container.' + colors.ENDC

    # command = 'ls ~/.docker/machine/machines/autobot/'
    # command_result = os.popen(command).read()
    # print command_result

    print
    print colors.HEADER + 'Checking your ENV variables' + colors.ENDC
    print colors.OKBLUE + 'You will customise autobot via environment variables.' + colors.ENDC
    print colors.OKBLUE + 'Do not worry if you don\'t have all these variables set,' + colors.ENDC
    print colors.OKBLUE + 'but if you do run into problems, it\'s nice to be aware of them.' + colors.ENDC
    print colors.OKBLUE + 'Tip: You might like to place these somewhere like ~/.bash_profile so they persist.' + colors.ENDC

    env_vars = {
        'MACHINE_STORAGE_PATH'   : '$PWD/.docker',
        'CONFLUENCE_USERNAME'    : 'your_username',
        'CONFLUENCE_PASSWORD'    : 'your_password',
        'HUBOT_HIPCHAT_JID'      : 'hubot_username',
        'HUBOT_HIPCHAT_PASSWORD' : 'hubot_password'
    }
    
    env_check(env_vars)    

    print colors.HEADER  + 'Checking what docker machines you have access to' + colors.ENDC
    print colors.OKBLUE  + 'You should see a docker machine called `dev` for local development,' + colors.ENDC
    print colors.OKBLUE  + 'and one called `autobot` for an environment you have deployed.' + colors.ENDC
    print colors.OKGREEN + 'docker-machine ls' + colors.ENDC
    command = 'docker-machine ls'
    command_result = os.popen(command).read()
    print command_result

def walkthrough():

    print

    print colors.HEADER + 'Create a docker machine on Amazon EC2' + colors.ENDC
    print 'ansible-playbook -i hosts site.yml  # specify --ask-vault-pass if your groups_vars/all is encrypted'
    print

    print colors.HEADER + 'Create docker containers on your host' + colors.ENDC
    print 'docker-compose up'
    print

    print colors.HEADER + 'Spin up a hubot container...' + colors.ENDC
    print colors.OKBLUE + 'Pass confluence credentials.' + colors.ENDC
    print 'docker-compose build hubot && docker run -it --rm \\' 
    print '-e CONFLUENCE_USERNAME=$CONFLUENCE_USERNAME -e CONFLUENCE_PASSWORD=$CONFLUENCE_PASSWORD'
    print

    print colors.HEADER + '...Optional: Link Containers' + colors.ENDC
    print colors.OKBLUE + 'Linking to the existing redis container.' + colors.ENDC
    print colors.OKBLUE + 'The hubot container is not given a name so it will not conflict with the existing hubot container.' + colors.ENDC
    print '--link autobot_redis_1:redis autobot_hubot:latest'
    print

    print colors.HEADER + '...Optional: Hipchat Connector (and Shell Adapter)' + colors.ENDC
    print colors.OKBLUE + 'Using hubot vars and connector (-a hipchat).' + colors.ENDC
    print colors.OKBLUE + 'The "Shell" adapter (hubot) can be used to test your change on the commandline' + colors.ENDC
    print '-e HUBOT_HIPCHAT_JID=$HUBOT_HIPCHAT_JID -e HUBOT_HIPCHAT_PASSWORD=$HUBOT_HIPCHAT_PASSWORD \\'
    print ' hubot -a hipchat'
    print

    print colors.HEADER + 'All together' + colors.ENDC
    print colors.OKBLUE + 'Using all the option extras.' + colors.ENDC
    print colors.OKBLUE + '`hubot` dumps you into a hubot-shell after spining up the containers' + colors.ENDC
    print colors.OKBLUE + '`-a hipchat` will connect directly to a hipchat server' + colors.ENDC
    print 'docker-compose build hubot && docker run -it --rm \\' 
    print '-e CONFLUENCE_USERNAME=$CONFLUENCE_USERNAME -e CONFLUENCE_PASSWORD=$CONFLUENCE_PASSWORD \\'
    print '-e HUBOT_HIPCHAT_JID=$HUBOT_HIPCHAT_JID -e HUBOT_HIPCHAT_PASSWORD=$HUBOT_HIPCHAT_PASSWORD \\'
    print '--link autobot_redis_1:redis autobot_hubot:latest hubot -a hipchat'
    print

    print colors.HEADER + 'What it looks like when it works' + colors.ENDC
    print colors.OKGREEN + '$ docker-compose build hubot && docker run ... hubot' + colors.ENDC
    print colors.OKBLUE + 'Building hubot...' + colors.ENDC
    print colors.OKBLUE + 'Step 0 : FROM ubuntu:trusty' + colors.ENDC
    print colors.OKBLUE + 'Step 1 : MAINTAINER Autocorp <https://github.com/autocorp>' + colors.ENDC
    print colors.OKBLUE + '...' + colors.ENDC
    print colors.OKBLUE + 'Successfully built 4be767a4a3a8' + colors.ENDC
    print colors.OKGREEN + 'Hubot> @hubot what is your opinion on badgers' + colors.ENDC
    print colors.OKBLUE + 'Badgers? BADGERS? WE DON\'T NEED NO STINKIN BADGERS' + colors.ENDC
    print

def run():

    if len(sys.argv) < 3:
        print colors.FAIL + 'why you no pass run param. Try `local` or `remote`.' + colors.ENDC

    elif (sys.argv[2]=='local'):
        print
        print colors.HEADER + '###########################' + colors.ENDC
        print colors.HEADER + '# Local autobot development' + colors.ENDC
        print colors.HEADER + '###########################' + colors.ENDC
        print
        print colors.OKBLUE + '# Create a VM for local development.' + colors.ENDC
        print colors.OKBLUE + '# Eval the docker env vars: Useful as your docker-* commands will target the autobot host.' + colors.ENDC
        print colors.OKBLUE + '# Build the Hubot container and run the Hubot shell.' + colors.ENDC
        print 'docker-machine create -d virtualbox dev'
        print 'eval "$(docker-machine env dev)"'
        print 'docker-compose build hubot && docker run -it --rm autobot_hubot:latest hubot'
        
        print
        print colors.HEADER + '# The Hubot shell' + colors.ENDC
        print colors.OKBLUE + '# Hubot> @hubot badgers' + colors.ENDC
        print colors.OKBLUE + '# Badgers? BADGERS? WE DON\'T NEED NO STINKIN BADGERS' + colors.ENDC
        print

        print colors.HEADER + '# Checking containers in dev' + colors.ENDC
        print colors.OKBLUE + 'Here are your dev containers, useful for troubleshooting.' + colors.ENDC
        print '`eval "$(docker-machine env dev)"; docker ps`'
        command = 'eval "$(docker-machine env dev)"; docker ps'
        command_result = os.popen(command).read()
        print command_result

    elif (sys.argv[2]=='remote'):
        print
        print colors.HEADER + '############################' + colors.ENDC
        print colors.HEADER + '# Remote autobot development' + colors.ENDC
        print colors.HEADER + '############################' + colors.ENDC
        print
        print colors.OKBLUE + '# Make sure you\'ve created a group_vars/all file. Use group_vars/example as a starting point.' + colors.ENDC
        print colors.OKBLUE + '# If your groups_vars/all is encrypted. Specify the --ask-vault-pass param.' + colors.ENDC
        print colors.OKBLUE + '# This ansible playbook will manage the VM and containers for autobot.' + colors.ENDC
        print 'ansible-playbook -i hosts site.yml'
    
        print    
        print colors.HEADER + '# Checking containers in autobot' + colors.ENDC
        print colors.OKBLUE + 'Here are your autobot containers, useful for troubleshooting.' + colors.ENDC
        print '`eval "$(docker-machine env autobot)"; docker ps`'
        command = 'eval "$(docker-machine env autobot)"; docker ps'
        command_result = os.popen(command).read()
        print command_result

    else:
        print colors.FAIL + 'why you no pass run param. Try `local` or `remote`.' + colors.ENDC

def help():

        print colors.HEADER + '--------------------------------------------------------------------------' + colors.ENDC
        print colors.HEADER + 'Hi, I\'m Jeeves. I\'m here to make sure everything is okay with autobot. *_*' + colors.ENDC
        print colors.HEADER + '--------------------------------------------------------------------------' + colors.ENDC

        print 'I can be quite helpful if you know how to ask.'
        print

        print colors.OKBLUE + '    -c --check' + colors.ENDC 
        print '        Check software, ENV vars and docker-machines.'
        print

        print colors.OKBLUE + '        jeeves -c software' + colors.ENDC 
        print '            Only check for the required software.'
        print

        print colors.OKBLUE + '    -h --help' + colors.ENDC 
        print '        Show this awesome help screen, but then again you alredy knew'
        print '        that -h does this, didn\'t you?'
        print

        print colors.OKBLUE + '    -r --run' + colors.ENDC 
        print '        Let me show you what commands to run, to get everyday tasks complete.'
        print
        print colors.OKBLUE + '        jeeves -r local' + colors.ENDC 
        print '            Create a VM for local development'
        print
        print colors.OKBLUE + '        jeeves -r remote' + colors.ENDC 
        print '            Create a VM for a remote environment'
        print

        print colors.OKBLUE + '    -w --walkthrough' + colors.ENDC 
        print '        A walkthrough of useful commands for controlling autobot.'
        print

if __name__ == '__main__':

    # set vars
    # act on incoming params
    for opt, arg in options:
        if opt in ['-c', '--check']:
            check_requirments()
        elif opt in ['-w', '--walkthrough']:
            walkthrough()
        elif opt in ['-r', '--run']:
            run()
        elif opt in ['-h', '--help']:
            help()

    # if no args passed, show help
    if not sys.argv[1:]:
        help()
